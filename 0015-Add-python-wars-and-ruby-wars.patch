From eacc3865a5c1234f8c533f1e5ce5d146868582e4 Mon Sep 17 00:00:00 2001
From: wsg <buaa_wsg@163.com>
Date: Thu, 25 Aug 2016 16:47:06 +0800
Subject: [PATCH 15/25] Add python wars and ruby wars

---
 001_wttc_8k.rb              |  7 ------
 002_sfl_7k.rb               | 33 ----------------------------
 003_stgc_7k.rb              | 15 -------------
 004_pd_7k.rb                |  7 ------
 005_roh_7k.rb               | 39 ---------------------------------
 006_waps_7k.rb              | 27 -----------------------
 007_iti_6k.md               | 29 -------------------------
 007_iti_6k.rb               | 33 ----------------------------
 008_notzon_5k.rb            | 32 ---------------------------
 009_ssp_6k.rb               | 53 ---------------------------------------------
 010_whtmm_6k.rb             | 38 --------------------------------
 011_bsfah_7k.rb             |  6 -----
 012_macfs_7k.rb             |  3 ---
 013_fp_7k.rb                | 19 ----------------
 014_si_7k.rb                |  3 ---
 015_etiftds_6k.rb           | 34 -----------------------------
 python_wars/268_skill       |  1 +
 ruby_wars/001_wttc_8k.rb    |  7 ++++++
 ruby_wars/002_sfl_7k.rb     | 33 ++++++++++++++++++++++++++++
 ruby_wars/003_stgc_7k.rb    | 15 +++++++++++++
 ruby_wars/004_pd_7k.rb      |  7 ++++++
 ruby_wars/005_roh_7k.rb     | 39 +++++++++++++++++++++++++++++++++
 ruby_wars/006_waps_7k.rb    | 27 +++++++++++++++++++++++
 ruby_wars/007_iti_6k.md     | 29 +++++++++++++++++++++++++
 ruby_wars/007_iti_6k.rb     | 33 ++++++++++++++++++++++++++++
 ruby_wars/008_notzon_5k.rb  | 32 +++++++++++++++++++++++++++
 ruby_wars/009_ssp_6k.rb     | 53 +++++++++++++++++++++++++++++++++++++++++++++
 ruby_wars/010_whtmm_6k.rb   | 38 ++++++++++++++++++++++++++++++++
 ruby_wars/011_bsfah_7k.rb   |  6 +++++
 ruby_wars/012_macfs_7k.rb   |  3 +++
 ruby_wars/013_fp_7k.rb      | 19 ++++++++++++++++
 ruby_wars/014_si_7k.rb      |  3 +++
 ruby_wars/015_etiftds_6k.rb | 34 +++++++++++++++++++++++++++++
 33 files changed, 379 insertions(+), 378 deletions(-)
 delete mode 100644 001_wttc_8k.rb
 delete mode 100644 002_sfl_7k.rb
 delete mode 100644 003_stgc_7k.rb
 delete mode 100644 004_pd_7k.rb
 delete mode 100644 005_roh_7k.rb
 delete mode 100644 006_waps_7k.rb
 delete mode 100644 007_iti_6k.md
 delete mode 100644 007_iti_6k.rb
 delete mode 100644 008_notzon_5k.rb
 delete mode 100644 009_ssp_6k.rb
 delete mode 100644 010_whtmm_6k.rb
 delete mode 100644 011_bsfah_7k.rb
 delete mode 100644 012_macfs_7k.rb
 delete mode 100644 013_fp_7k.rb
 delete mode 100644 014_si_7k.rb
 delete mode 100644 015_etiftds_6k.rb
 create mode 160000 python_wars/268_skill
 create mode 100644 ruby_wars/001_wttc_8k.rb
 create mode 100644 ruby_wars/002_sfl_7k.rb
 create mode 100644 ruby_wars/003_stgc_7k.rb
 create mode 100644 ruby_wars/004_pd_7k.rb
 create mode 100644 ruby_wars/005_roh_7k.rb
 create mode 100644 ruby_wars/006_waps_7k.rb
 create mode 100644 ruby_wars/007_iti_6k.md
 create mode 100644 ruby_wars/007_iti_6k.rb
 create mode 100644 ruby_wars/008_notzon_5k.rb
 create mode 100644 ruby_wars/009_ssp_6k.rb
 create mode 100644 ruby_wars/010_whtmm_6k.rb
 create mode 100644 ruby_wars/011_bsfah_7k.rb
 create mode 100644 ruby_wars/012_macfs_7k.rb
 create mode 100644 ruby_wars/013_fp_7k.rb
 create mode 100644 ruby_wars/014_si_7k.rb
 create mode 100644 ruby_wars/015_etiftds_6k.rb

diff --git a/001_wttc_8k.rb b/001_wttc_8k.rb
deleted file mode 100644
index 0643dbc..0000000
--- a/001_wttc_8k.rb
+++ /dev/null
@@ -1,7 +0,0 @@
-#welcome to the city
-=begin
-1. The "name" must be connect with " "
-=end
-
-def say_hello
-  
\ No newline at end of file
diff --git a/002_sfl_7k.rb b/002_sfl_7k.rb
deleted file mode 100644
index 0a4d2e2..0000000
--- a/002_sfl_7k.rb
+++ /dev/null
@@ -1,33 +0,0 @@
-#search for letters
-def change(word)
-  # put your code here!
-  arr = Array.new(26, '0')
-  #arr = [0] * 26
-  str = word.downcase
-  str.each_byte{|byte|   #this byte can be replace by |c| or other variable
-    if ((byte<=122)&&(byte>=97))
-      arr[byte-97] = 1
-    end
-    #if can not have {} here!!
-   }
-  return arr.join
-  #doesn't need to use return it can be automatically
-  # it is shortcut of  arr.join("") because there is no separte code in "" 
-end
-
-
-def change_2(word)
-  (”a”..“z“).map {|v| word.downcase.include?(v) ? '1' : '0'}.join
-end
-
-
-def change_3(word)
-  0.upto(25).map { |v| word.index(('a'.ord + i).chr).nil? ? 0 : 1}.join
-  #'a'.ord can get its ascii value
-end
-
-def change_4(word)
-  '%026b' % (a.each_byte.reduce(0)) { |m, c| m | (1 << 122 - (c | 32))} & ~(-1 << 26)
-end
-#这种印出方式参见
-#puts "He's %d inches tall." % my_height    has 'sapce' between '%' and my_height
\ No newline at end of file
diff --git a/003_stgc_7k.rb b/003_stgc_7k.rb
deleted file mode 100644
index 5e3498f..0000000
--- a/003_stgc_7k.rb
+++ /dev/null
@@ -1,15 +0,0 @@
-#sort for gift code
-def sort_gift_code code
-  #TODO
-  ('a'..'z').map {|letter| code.include?(letter) ? letter : ''}.join
-end
-
-
-def sort_gift_code code
-  code.chars.sort.join
-  #code.split('').sort.join
-end
-# string#chars return an array of characters in str
-# Array#sort can sort it then use the join to connect them
-#you can use split('') to separte them
-
diff --git a/004_pd_7k.rb b/004_pd_7k.rb
deleted file mode 100644
index 1a75e00..0000000
--- a/004_pd_7k.rb
+++ /dev/null
@@ -1,7 +0,0 @@
-#padded numbers
-def solution(value)
-  "Value is %.5d" % value
-  # "Value is %05d" % [value]
-  sprintf "Value is %05d", value
-  # we should use sprintf to get the 00005
-end
\ No newline at end of file
diff --git a/005_roh_7k.rb b/005_roh_7k.rb
deleted file mode 100644
index 3f1aa70..0000000
--- a/005_roh_7k.rb
+++ /dev/null
@@ -1,39 +0,0 @@
-#remove odd hashes
-def remove_odd_hashes(array, key_1, key_2)
-  array.delete_if{|x| (x[key_1] + x[key_2]).odd? }
-end
-#there is an interator delete_if!
-
-def remove_odd_hashes(array, key_1, key_2)
-  array.delete_if{|x| x.values.inject(:+).odd?}
-end
-
-def remove_odd_hashes(array, key_1, key_2)
-  array.reject {|h| (h[key_1] + h[key_2]).odd? }
-end
-
-def remove_odd_hashes(array, key_1, key_2)
-  array.select do |x|
-    (x[key_1] + x[key_2]).even?
-  end
-end
-
-# may be error
-def remove_odd_hashes(array, key_1, key_2)
-  #you can check for "%" operator
-  array.map{ |hashes| ((hashes[key_1] + hashes[key_2])%2 != 0) ? array.delete(hashes) : {} }
-  return array
-end
-#pay attention 1.9.2 cannot do an array with only one variable
-#!!!!!expect [] but it return [ {a: 3, b: 4} ]!!!
-
-
-def remove_odd_hashes_2(array, key_1, key_2)
-  array2 = []
-  array.map{ |hashes| ((hashes[key_1] + hashes[key_2]) % 2 != 0) ? array2.push(hashes) : {}}
-  array2
-end
-
-
-p remove_odd_hashes( 
-  [ {a: 3, b: 4} ],  :a, :b)
\ No newline at end of file
diff --git a/006_waps_7k.rb b/006_waps_7k.rb
deleted file mode 100644
index 4f10caa..0000000
--- a/006_waps_7k.rb
+++ /dev/null
@@ -1,27 +0,0 @@
-#Given an array of number, which are perfect squares?
-#this means you choose square numbers from the array
-
-=begin
-pay attention the range is not array! so the array = 1..16 cannot use array[1]
-the array can do map select dircetirly and it can do some other things just like array can
-=end
-
-def gets_squares(array)
-  array.select{ |i| Math.sqrt(i) % 1 == 0}.uniq.sort
-end
-# Math.sqrt() = i**0.5
-
-#my solution :the answer is right but it is totally mass
-#understand wrong not one by one but select
-def get_squares(array)
-  #Enter code here!
-  arr = array.to_a.sort
-  p array
-  number = arr[-1]
-  str = Array.new
-  (1..number).map {|n| (arr.include?(n*n))&&(n*n <= number) ? str<<n*n :{}}
-  str
-end
-
-
-p get_squares(1..2)
diff --git a/007_iti_6k.md b/007_iti_6k.md
deleted file mode 100644
index 1679f74..0000000
--- a/007_iti_6k.md
+++ /dev/null
@@ -1,29 +0,0 @@
-#Ipv4 to int32
-
-###Ruby N进制到10进制的转化
-
-| expression  |    result|
-|-------------|----------|
-|"1234".to_i| 12345|
-|"99 red ballon".to_i|99|
-|"0a".to_i(16)|10|
-|"hello".to_i|0|
-|"1100101".to_i(2)|101|
-|"1100101".to_i(8)|294977|
-|"1100101".to_i(10)|1100101|
-|"1100101".to_i(16)|17826049|
-
-    number.to_i(N) 
-    
-
-
-###Ruby 字符串格式化
-|expression  |    result|
-|------------|----------|
-|"%05d" % 123 |00123|
-|"%02X" % 10 | 0A|
-|"%03x" % 10 | 00a|
-|"%.10x" % 10| 000000000a|
-|"10x" % 10| "(9个空格)a"|
-
-[链接](http://blog.csdn.net/garn_hsia/article/details/7869895)
\ No newline at end of file
diff --git a/007_iti_6k.rb b/007_iti_6k.rb
deleted file mode 100644
index 4cdab3d..0000000
--- a/007_iti_6k.rb
+++ /dev/null
@@ -1,33 +0,0 @@
-# ipv4 to int32
-# it has some massive information,it is unnecessary to calculate 128.32.10.1 == 10000000.00100000.00001010.00000001
-
-def ip_to_int32(ip)
-  ("%02x%02x%02x%02x" % ip.split('.')).to_i(16)
-# ("%08b%08b%08b%08b" % ip.split('.')).to_i(2)
-end
-# N进制转化为10进制的方法为：to_i(N)
-# 2X进制可以很方便的转化，但是2X转化为其他进制比较难
-# also can use map + join
-
-
-def ip_to_int32(ip)
-  ip.split('.').inject(0){|total, val|
-    (total << 8) + val.to_i
-  }
-end
-#<<移位
-
-def ip_to_int32(ip)
-  ip.split(".").map{ |octet| ("%08b" % octet.to_i) }.join.to_i(2)
-end
- 
-
-def convert(ipv4)
-  string = ipv4.split(/\./)
-  sum = 0
-  (0..3).map{|nu|
-    sum = (string[nu].to_i * (2 ** (8*(3 - nu)))) + sum 
-    
-  }
- sum
-end
diff --git a/008_notzon_5k.rb b/008_notzon_5k.rb
deleted file mode 100644
index 31ddd83..0000000
--- a/008_notzon_5k.rb
+++ /dev/null
@@ -1,32 +0,0 @@
-#Number of trailing zeros of N!
-def zeros(n, pow = 5)
-  pow <= n ? zero (n, pow*5) + (n/pow).floor : 0
-end
-
-
-def zeros(n)
-  (1..Math.log(n,5)).reduce(0){|result, power| result + (n/5**power).to_i}
-end
-# fastest one
-
-def zeros(n)
-  zero = 0
-  zeros += n /= 5 while n >= 1
-  zeros
-end
-
-
-def zeros(n)
-  (n/4.00000003).floor
-end
-
-
-def zero(n)
-  i = 1
-  result = 0
-  while (n <= i ) do
-    i *= 5
-    result += n/i
-  end
-  result
-end
\ No newline at end of file
diff --git a/009_ssp_6k.rb b/009_ssp_6k.rb
deleted file mode 100644
index d30bcd7..0000000
--- a/009_ssp_6k.rb
+++ /dev/null
@@ -1,53 +0,0 @@
-#sort sentence pseudo-alphabetically
-def sort sentence
-  lower, upper = sentence.scan(/\w+/).partition{|w| w.downcase == w}
-  (lower.sort + upper.sort.reverse).join(" ")
-end
-
-def sort(s)
-  groups = s.scan(/\w+/).group_by { |w| w.start_with?(*('a'..'z'))}
-  lower = (groups[true] || []).sort
-  upper = (groups[false]) || []).sort.reverse
-  (lower + upper).join(' ')
-end
-
-def sort sentence
-  sentence.scan(/[a-z]+/i).partition{|x| x[0].downcase == x[0]}.map.with_index{|x, i| i == 0 ? x.sort : x.sort.reverse}.flatten.join(' ')
-end
-
-def sort(sentence)
-  words = sentence.split(/\W/).reject{|v| v.empty?}
-  upcase = words.select{ |w| uppercase? w}
-  downcase = words.reject { |w| uppercase? w}
-  upcase.sort!.reverse!
-  downcase.sort!
-  "#{downcase.join(' ')} #{upcase.join(' ')}".gusb(/^\s+/, '').gsub(/\s+$/, '')
-end
-def uppercase?(word)
-  !!(word =~ /^[A-Z]/)
-end
-
-def sort sentence
-  words = sentence.gsub(/[^a-z]/i, '').split(" ")
-  lowers = words.select{|w| w[0] == w[0].downcase}.sort
-  uppers = words.select{|w| w[0] == w[0].uppercase}.sort.reverse 
-  (lowers + uppers).join(" ")
-end
-
-def sort(sentence)
-  sentence_new = sentence.gsub(/[\,\.\?\!\:\;]/, "")
-  string = sentence_new.split(" ")
-  string1=[]
-  string2=[]
-  string.each{|a|
-    if(/[[:upper:]]/.match(a))
-      string1 << a
-    else
-      string2 << a
-    end
-  }
-  string1.sort{ |x,y| y <=> x}
-  string2.sort
-  string3 = string2 + string1
-  string3.join(" ")
-end
\ No newline at end of file
diff --git a/010_whtmm_6k.rb b/010_whtmm_6k.rb
deleted file mode 100644
index c18d464..0000000
--- a/010_whtmm_6k.rb
+++ /dev/null
@@ -1,38 +0,0 @@
-class Student
-  attr_reader :name
-  attr_reader :fives
-  attr_reader :tens
-  attr_reader :twenties
-  
-  def initialize(name, fives, tens, twenties)
-    @name = name
-    @fives = fives
-    @tens = tens
-    @twenties = twenties
-  end
-end
-
-def most_money(students)
-  students.sort! do |a, b|
-    (a.fives + a.tens * 2 + a.twenties * 4) <=> (b.fives + b.tens * 2 + b.twenties * 4)
-  end
-  if (students[0].fives + students[0].tens * 2 +students[0].twenties * 4) == (students[-1].fives + students[-1].tens * 2 + students[-1].twenties * 4)
-     'all'
-  else
-    students[-1].name
-  end
-end
-
-
-student_1 = Student.new('wang', 0, 0, 45)
-student_2 = Student.new('hou', 0, 1, 300)
-student_3 = Student.new('liu', 1, 0, 0)
-students = [student_1, student_2, student_3]
-
-#students.sort! do |a, b|
-#  (b.fives + b.tens * 2 + b.twenties * 4) <=> (a.fives + a.tens * 2 + a.twenties * 4)
-#end
-
-
-#students[1].name
-p most_money(students)
\ No newline at end of file
diff --git a/011_bsfah_7k.rb b/011_bsfah_7k.rb
deleted file mode 100644
index 4a36e43..0000000
--- a/011_bsfah_7k.rb
+++ /dev/null
@@ -1,6 +0,0 @@
-def solution(pairs)
-  p
- # pairs.map{|name, value| '#{name} = #{value}'}.join(",")
- pairs.map{|a| a.join(" = ")}.join(",")
-end
-p solution({:a=>1, :b=>'2'})
\ No newline at end of file
diff --git a/012_macfs_7k.rb b/012_macfs_7k.rb
deleted file mode 100644
index 79f368d..0000000
--- a/012_macfs_7k.rb
+++ /dev/null
@@ -1,3 +0,0 @@
-def time_for_milk_and_cookies(date)
-  months = ['January','February','Match','April','May','June','July','August','September','October','November','December']
-  date
\ No newline at end of file
diff --git a/013_fp_7k.rb b/013_fp_7k.rb
deleted file mode 100644
index 7818eb4..0000000
--- a/013_fp_7k.rb
+++ /dev/null
@@ -1,19 +0,0 @@
-def solution(value)
-  formatted = "%.2f" % value
-  formatted.class #string! not number!
-  formatted.to_f
-end
-
-# pay attention!!!! just
-# "%.2f" % value return string not number!
-
-def solution(value)
-  value.round(2)
-end
-
-def solution(value)
-  ("%0.2f" % value).to_f
-end
-
-
-p solution(2.333333)
\ No newline at end of file
diff --git a/014_si_7k.rb b/014_si_7k.rb
deleted file mode 100644
index 8145cf6..0000000
--- a/014_si_7k.rb
+++ /dev/null
@@ -1,3 +0,0 @@
-def is_santa_clausable(obj)
-  obj.respond_to?('say_ho_ho_ho')&& obj.respond_to?('distribute_gifts')&& obj.respond_to?('go_down_the_chimney')
-end
\ No newline at end of file
diff --git a/015_etiftds_6k.rb b/015_etiftds_6k.rb
deleted file mode 100644
index df9392b..0000000
--- a/015_etiftds_6k.rb
+++ /dev/null
@@ -1,34 +0,0 @@
-def extract_ids(data)
-  (data[:items] || []).inject([data[:id]]) do |accum, e|
-    accum.concat(extract_ids(e))
-  end
-end
-#concat
-def extract_ids(data)
-  [1,3,4,6,7,8,9]
-end
-# what the answer is!!!
-def extract_ids(data)
-  data.to_s.scan(/:id=>(\d+)/).flatten.map(&:to_i)
-end
-
-def extract_ids(data, ids = [])
-  ids.push data[:id]
-  if items = data[:items]
-    items.each { |i| extract_ids(i, ids)}
-  end
-end
-
-
-data = {
-  id: 1,
-  items: [
-    {id: 2},
-    {id: 3, items: [
-      {id: 4},
-      {id: 5}
-    ]}
-  ]
-}
-
-p extract_ids(data)
\ No newline at end of file
diff --git a/python_wars/268_skill b/python_wars/268_skill
new file mode 160000
index 0000000..1c8d7e7
--- /dev/null
+++ b/python_wars/268_skill
@@ -0,0 +1 @@
+Subproject commit 1c8d7e7200385f92a8a047b8cbc732a225f43e8c
diff --git a/ruby_wars/001_wttc_8k.rb b/ruby_wars/001_wttc_8k.rb
new file mode 100644
index 0000000..0643dbc
--- /dev/null
+++ b/ruby_wars/001_wttc_8k.rb
@@ -0,0 +1,7 @@
+#welcome to the city
+=begin
+1. The "name" must be connect with " "
+=end
+
+def say_hello
+  
\ No newline at end of file
diff --git a/ruby_wars/002_sfl_7k.rb b/ruby_wars/002_sfl_7k.rb
new file mode 100644
index 0000000..0a4d2e2
--- /dev/null
+++ b/ruby_wars/002_sfl_7k.rb
@@ -0,0 +1,33 @@
+#search for letters
+def change(word)
+  # put your code here!
+  arr = Array.new(26, '0')
+  #arr = [0] * 26
+  str = word.downcase
+  str.each_byte{|byte|   #this byte can be replace by |c| or other variable
+    if ((byte<=122)&&(byte>=97))
+      arr[byte-97] = 1
+    end
+    #if can not have {} here!!
+   }
+  return arr.join
+  #doesn't need to use return it can be automatically
+  # it is shortcut of  arr.join("") because there is no separte code in "" 
+end
+
+
+def change_2(word)
+  (”a”..“z“).map {|v| word.downcase.include?(v) ? '1' : '0'}.join
+end
+
+
+def change_3(word)
+  0.upto(25).map { |v| word.index(('a'.ord + i).chr).nil? ? 0 : 1}.join
+  #'a'.ord can get its ascii value
+end
+
+def change_4(word)
+  '%026b' % (a.each_byte.reduce(0)) { |m, c| m | (1 << 122 - (c | 32))} & ~(-1 << 26)
+end
+#这种印出方式参见
+#puts "He's %d inches tall." % my_height    has 'sapce' between '%' and my_height
\ No newline at end of file
diff --git a/ruby_wars/003_stgc_7k.rb b/ruby_wars/003_stgc_7k.rb
new file mode 100644
index 0000000..5e3498f
--- /dev/null
+++ b/ruby_wars/003_stgc_7k.rb
@@ -0,0 +1,15 @@
+#sort for gift code
+def sort_gift_code code
+  #TODO
+  ('a'..'z').map {|letter| code.include?(letter) ? letter : ''}.join
+end
+
+
+def sort_gift_code code
+  code.chars.sort.join
+  #code.split('').sort.join
+end
+# string#chars return an array of characters in str
+# Array#sort can sort it then use the join to connect them
+#you can use split('') to separte them
+
diff --git a/ruby_wars/004_pd_7k.rb b/ruby_wars/004_pd_7k.rb
new file mode 100644
index 0000000..1a75e00
--- /dev/null
+++ b/ruby_wars/004_pd_7k.rb
@@ -0,0 +1,7 @@
+#padded numbers
+def solution(value)
+  "Value is %.5d" % value
+  # "Value is %05d" % [value]
+  sprintf "Value is %05d", value
+  # we should use sprintf to get the 00005
+end
\ No newline at end of file
diff --git a/ruby_wars/005_roh_7k.rb b/ruby_wars/005_roh_7k.rb
new file mode 100644
index 0000000..3f1aa70
--- /dev/null
+++ b/ruby_wars/005_roh_7k.rb
@@ -0,0 +1,39 @@
+#remove odd hashes
+def remove_odd_hashes(array, key_1, key_2)
+  array.delete_if{|x| (x[key_1] + x[key_2]).odd? }
+end
+#there is an interator delete_if!
+
+def remove_odd_hashes(array, key_1, key_2)
+  array.delete_if{|x| x.values.inject(:+).odd?}
+end
+
+def remove_odd_hashes(array, key_1, key_2)
+  array.reject {|h| (h[key_1] + h[key_2]).odd? }
+end
+
+def remove_odd_hashes(array, key_1, key_2)
+  array.select do |x|
+    (x[key_1] + x[key_2]).even?
+  end
+end
+
+# may be error
+def remove_odd_hashes(array, key_1, key_2)
+  #you can check for "%" operator
+  array.map{ |hashes| ((hashes[key_1] + hashes[key_2])%2 != 0) ? array.delete(hashes) : {} }
+  return array
+end
+#pay attention 1.9.2 cannot do an array with only one variable
+#!!!!!expect [] but it return [ {a: 3, b: 4} ]!!!
+
+
+def remove_odd_hashes_2(array, key_1, key_2)
+  array2 = []
+  array.map{ |hashes| ((hashes[key_1] + hashes[key_2]) % 2 != 0) ? array2.push(hashes) : {}}
+  array2
+end
+
+
+p remove_odd_hashes( 
+  [ {a: 3, b: 4} ],  :a, :b)
\ No newline at end of file
diff --git a/ruby_wars/006_waps_7k.rb b/ruby_wars/006_waps_7k.rb
new file mode 100644
index 0000000..4f10caa
--- /dev/null
+++ b/ruby_wars/006_waps_7k.rb
@@ -0,0 +1,27 @@
+#Given an array of number, which are perfect squares?
+#this means you choose square numbers from the array
+
+=begin
+pay attention the range is not array! so the array = 1..16 cannot use array[1]
+the array can do map select dircetirly and it can do some other things just like array can
+=end
+
+def gets_squares(array)
+  array.select{ |i| Math.sqrt(i) % 1 == 0}.uniq.sort
+end
+# Math.sqrt() = i**0.5
+
+#my solution :the answer is right but it is totally mass
+#understand wrong not one by one but select
+def get_squares(array)
+  #Enter code here!
+  arr = array.to_a.sort
+  p array
+  number = arr[-1]
+  str = Array.new
+  (1..number).map {|n| (arr.include?(n*n))&&(n*n <= number) ? str<<n*n :{}}
+  str
+end
+
+
+p get_squares(1..2)
diff --git a/ruby_wars/007_iti_6k.md b/ruby_wars/007_iti_6k.md
new file mode 100644
index 0000000..1679f74
--- /dev/null
+++ b/ruby_wars/007_iti_6k.md
@@ -0,0 +1,29 @@
+#Ipv4 to int32
+
+###Ruby N进制到10进制的转化
+
+| expression  |    result|
+|-------------|----------|
+|"1234".to_i| 12345|
+|"99 red ballon".to_i|99|
+|"0a".to_i(16)|10|
+|"hello".to_i|0|
+|"1100101".to_i(2)|101|
+|"1100101".to_i(8)|294977|
+|"1100101".to_i(10)|1100101|
+|"1100101".to_i(16)|17826049|
+
+    number.to_i(N) 
+    
+
+
+###Ruby 字符串格式化
+|expression  |    result|
+|------------|----------|
+|"%05d" % 123 |00123|
+|"%02X" % 10 | 0A|
+|"%03x" % 10 | 00a|
+|"%.10x" % 10| 000000000a|
+|"10x" % 10| "(9个空格)a"|
+
+[链接](http://blog.csdn.net/garn_hsia/article/details/7869895)
\ No newline at end of file
diff --git a/ruby_wars/007_iti_6k.rb b/ruby_wars/007_iti_6k.rb
new file mode 100644
index 0000000..4cdab3d
--- /dev/null
+++ b/ruby_wars/007_iti_6k.rb
@@ -0,0 +1,33 @@
+# ipv4 to int32
+# it has some massive information,it is unnecessary to calculate 128.32.10.1 == 10000000.00100000.00001010.00000001
+
+def ip_to_int32(ip)
+  ("%02x%02x%02x%02x" % ip.split('.')).to_i(16)
+# ("%08b%08b%08b%08b" % ip.split('.')).to_i(2)
+end
+# N进制转化为10进制的方法为：to_i(N)
+# 2X进制可以很方便的转化，但是2X转化为其他进制比较难
+# also can use map + join
+
+
+def ip_to_int32(ip)
+  ip.split('.').inject(0){|total, val|
+    (total << 8) + val.to_i
+  }
+end
+#<<移位
+
+def ip_to_int32(ip)
+  ip.split(".").map{ |octet| ("%08b" % octet.to_i) }.join.to_i(2)
+end
+ 
+
+def convert(ipv4)
+  string = ipv4.split(/\./)
+  sum = 0
+  (0..3).map{|nu|
+    sum = (string[nu].to_i * (2 ** (8*(3 - nu)))) + sum 
+    
+  }
+ sum
+end
diff --git a/ruby_wars/008_notzon_5k.rb b/ruby_wars/008_notzon_5k.rb
new file mode 100644
index 0000000..31ddd83
--- /dev/null
+++ b/ruby_wars/008_notzon_5k.rb
@@ -0,0 +1,32 @@
+#Number of trailing zeros of N!
+def zeros(n, pow = 5)
+  pow <= n ? zero (n, pow*5) + (n/pow).floor : 0
+end
+
+
+def zeros(n)
+  (1..Math.log(n,5)).reduce(0){|result, power| result + (n/5**power).to_i}
+end
+# fastest one
+
+def zeros(n)
+  zero = 0
+  zeros += n /= 5 while n >= 1
+  zeros
+end
+
+
+def zeros(n)
+  (n/4.00000003).floor
+end
+
+
+def zero(n)
+  i = 1
+  result = 0
+  while (n <= i ) do
+    i *= 5
+    result += n/i
+  end
+  result
+end
\ No newline at end of file
diff --git a/ruby_wars/009_ssp_6k.rb b/ruby_wars/009_ssp_6k.rb
new file mode 100644
index 0000000..d30bcd7
--- /dev/null
+++ b/ruby_wars/009_ssp_6k.rb
@@ -0,0 +1,53 @@
+#sort sentence pseudo-alphabetically
+def sort sentence
+  lower, upper = sentence.scan(/\w+/).partition{|w| w.downcase == w}
+  (lower.sort + upper.sort.reverse).join(" ")
+end
+
+def sort(s)
+  groups = s.scan(/\w+/).group_by { |w| w.start_with?(*('a'..'z'))}
+  lower = (groups[true] || []).sort
+  upper = (groups[false]) || []).sort.reverse
+  (lower + upper).join(' ')
+end
+
+def sort sentence
+  sentence.scan(/[a-z]+/i).partition{|x| x[0].downcase == x[0]}.map.with_index{|x, i| i == 0 ? x.sort : x.sort.reverse}.flatten.join(' ')
+end
+
+def sort(sentence)
+  words = sentence.split(/\W/).reject{|v| v.empty?}
+  upcase = words.select{ |w| uppercase? w}
+  downcase = words.reject { |w| uppercase? w}
+  upcase.sort!.reverse!
+  downcase.sort!
+  "#{downcase.join(' ')} #{upcase.join(' ')}".gusb(/^\s+/, '').gsub(/\s+$/, '')
+end
+def uppercase?(word)
+  !!(word =~ /^[A-Z]/)
+end
+
+def sort sentence
+  words = sentence.gsub(/[^a-z]/i, '').split(" ")
+  lowers = words.select{|w| w[0] == w[0].downcase}.sort
+  uppers = words.select{|w| w[0] == w[0].uppercase}.sort.reverse 
+  (lowers + uppers).join(" ")
+end
+
+def sort(sentence)
+  sentence_new = sentence.gsub(/[\,\.\?\!\:\;]/, "")
+  string = sentence_new.split(" ")
+  string1=[]
+  string2=[]
+  string.each{|a|
+    if(/[[:upper:]]/.match(a))
+      string1 << a
+    else
+      string2 << a
+    end
+  }
+  string1.sort{ |x,y| y <=> x}
+  string2.sort
+  string3 = string2 + string1
+  string3.join(" ")
+end
\ No newline at end of file
diff --git a/ruby_wars/010_whtmm_6k.rb b/ruby_wars/010_whtmm_6k.rb
new file mode 100644
index 0000000..c18d464
--- /dev/null
+++ b/ruby_wars/010_whtmm_6k.rb
@@ -0,0 +1,38 @@
+class Student
+  attr_reader :name
+  attr_reader :fives
+  attr_reader :tens
+  attr_reader :twenties
+  
+  def initialize(name, fives, tens, twenties)
+    @name = name
+    @fives = fives
+    @tens = tens
+    @twenties = twenties
+  end
+end
+
+def most_money(students)
+  students.sort! do |a, b|
+    (a.fives + a.tens * 2 + a.twenties * 4) <=> (b.fives + b.tens * 2 + b.twenties * 4)
+  end
+  if (students[0].fives + students[0].tens * 2 +students[0].twenties * 4) == (students[-1].fives + students[-1].tens * 2 + students[-1].twenties * 4)
+     'all'
+  else
+    students[-1].name
+  end
+end
+
+
+student_1 = Student.new('wang', 0, 0, 45)
+student_2 = Student.new('hou', 0, 1, 300)
+student_3 = Student.new('liu', 1, 0, 0)
+students = [student_1, student_2, student_3]
+
+#students.sort! do |a, b|
+#  (b.fives + b.tens * 2 + b.twenties * 4) <=> (a.fives + a.tens * 2 + a.twenties * 4)
+#end
+
+
+#students[1].name
+p most_money(students)
\ No newline at end of file
diff --git a/ruby_wars/011_bsfah_7k.rb b/ruby_wars/011_bsfah_7k.rb
new file mode 100644
index 0000000..4a36e43
--- /dev/null
+++ b/ruby_wars/011_bsfah_7k.rb
@@ -0,0 +1,6 @@
+def solution(pairs)
+  p
+ # pairs.map{|name, value| '#{name} = #{value}'}.join(",")
+ pairs.map{|a| a.join(" = ")}.join(",")
+end
+p solution({:a=>1, :b=>'2'})
\ No newline at end of file
diff --git a/ruby_wars/012_macfs_7k.rb b/ruby_wars/012_macfs_7k.rb
new file mode 100644
index 0000000..79f368d
--- /dev/null
+++ b/ruby_wars/012_macfs_7k.rb
@@ -0,0 +1,3 @@
+def time_for_milk_and_cookies(date)
+  months = ['January','February','Match','April','May','June','July','August','September','October','November','December']
+  date
\ No newline at end of file
diff --git a/ruby_wars/013_fp_7k.rb b/ruby_wars/013_fp_7k.rb
new file mode 100644
index 0000000..7818eb4
--- /dev/null
+++ b/ruby_wars/013_fp_7k.rb
@@ -0,0 +1,19 @@
+def solution(value)
+  formatted = "%.2f" % value
+  formatted.class #string! not number!
+  formatted.to_f
+end
+
+# pay attention!!!! just
+# "%.2f" % value return string not number!
+
+def solution(value)
+  value.round(2)
+end
+
+def solution(value)
+  ("%0.2f" % value).to_f
+end
+
+
+p solution(2.333333)
\ No newline at end of file
diff --git a/ruby_wars/014_si_7k.rb b/ruby_wars/014_si_7k.rb
new file mode 100644
index 0000000..8145cf6
--- /dev/null
+++ b/ruby_wars/014_si_7k.rb
@@ -0,0 +1,3 @@
+def is_santa_clausable(obj)
+  obj.respond_to?('say_ho_ho_ho')&& obj.respond_to?('distribute_gifts')&& obj.respond_to?('go_down_the_chimney')
+end
\ No newline at end of file
diff --git a/ruby_wars/015_etiftds_6k.rb b/ruby_wars/015_etiftds_6k.rb
new file mode 100644
index 0000000..df9392b
--- /dev/null
+++ b/ruby_wars/015_etiftds_6k.rb
@@ -0,0 +1,34 @@
+def extract_ids(data)
+  (data[:items] || []).inject([data[:id]]) do |accum, e|
+    accum.concat(extract_ids(e))
+  end
+end
+#concat
+def extract_ids(data)
+  [1,3,4,6,7,8,9]
+end
+# what the answer is!!!
+def extract_ids(data)
+  data.to_s.scan(/:id=>(\d+)/).flatten.map(&:to_i)
+end
+
+def extract_ids(data, ids = [])
+  ids.push data[:id]
+  if items = data[:items]
+    items.each { |i| extract_ids(i, ids)}
+  end
+end
+
+
+data = {
+  id: 1,
+  items: [
+    {id: 2},
+    {id: 3, items: [
+      {id: 4},
+      {id: 5}
+    ]}
+  ]
+}
+
+p extract_ids(data)
\ No newline at end of file
-- 
2.5.5

