From 83c0ea210653513f1532f480b89d8a8865a5b2e8 Mon Sep 17 00:00:00 2001
From: wsg <buaa_wsg@163.com>
Date: Fri, 26 Aug 2016 19:11:16 +0800
Subject: [PATCH 24/25] add python skills until 48

---
 python_skills/038_Parse_string_float_or_int.py  | 45 +++++++++++++++++++++++++
 python_skills/039_determine_capitalize.py       | 42 +++++++++++++++++++++++
 python_skills/040_string_upper_capitalize.py    | 17 ++++++++++
 python_skills/041_partition_of_string.py        | 19 +++++++++++
 python_skills/042_patrition_of_matched_regex.py | 26 ++++++++++++++
 python_skills/043_pre_post_string_with_regex.py | 18 ++++++++++
 python_skills/044_regex_match_length.py         | 16 +++++++++
 python_skills/045_split_line_to_section.py      | 10 ++++++
 python_skills/046_split_string_into_line.py     | 12 +++++++
 python_skills/047_split_string_into_word.py     |  9 +++++
 python_skills/048_regex_split_string.py         | 17 ++++++++++
 11 files changed, 231 insertions(+)
 create mode 100644 python_skills/039_determine_capitalize.py
 create mode 100644 python_skills/040_string_upper_capitalize.py
 create mode 100644 python_skills/041_partition_of_string.py
 create mode 100644 python_skills/042_patrition_of_matched_regex.py
 create mode 100644 python_skills/043_pre_post_string_with_regex.py
 create mode 100644 python_skills/044_regex_match_length.py
 create mode 100644 python_skills/045_split_line_to_section.py
 create mode 100644 python_skills/046_split_string_into_line.py
 create mode 100644 python_skills/047_split_string_into_word.py
 create mode 100644 python_skills/048_regex_split_string.py

diff --git a/python_skills/038_Parse_string_float_or_int.py b/python_skills/038_Parse_string_float_or_int.py
index a1b5a95..53b8ef5 100644
--- a/python_skills/038_Parse_string_float_or_int.py
+++ b/python_skills/038_Parse_string_float_or_int.py
@@ -8,5 +8,50 @@
 #Create: 2016-08-25 23:00:58
 #Last Modifieda: 2016-08-25 23:00:58
 #*********************************************************
+import os
 
+string_1 = "1234"
+string_2 = "12.34567346456756745634"
 
+
+print float(string_1)
+print float(string_2)
+print int(string_1)
+try:
+    print int(string_2)
+except ValueError , e:
+    print "you can use ValueError as e or , e"
+    print "ValueError: ",e
+
+print "a good method is using int(float())"
+print int(float(string_2))
+
+print format(1233245, 'b')
+print bin(1233245)
+print bin(-1233245)
+print format(12341, 'x'),": hex"
+print format(12345, 'o'),": Oct"
+print hex(1234) 
+oct_num=oct(12354)
+print "oct_num is a string"
+print int(oct_num, 8)
+
+print "2-binary"
+print "8-octal"
+print "10-decimal"
+print "16-hex"
+
+string_3 = "777"
+i = int(string_3, 8)
+print i == 0777
+print int(oct(i))
+print i
+oct_num = oct(int("0777", 8))
+print oct_num == 0777
+
+
+os.chmod("./037_string_of_integer.py", 0644)
+
+i = int("0644",8)
+print i
+os.chmod("./038_Parse_string_float_or_int.py", i)
diff --git a/python_skills/039_determine_capitalize.py b/python_skills/039_determine_capitalize.py
new file mode 100644
index 0000000..1f025f9
--- /dev/null
+++ b/python_skills/039_determine_capitalize.py
@@ -0,0 +1,42 @@
+#!/usr/bin/python
+#-*- coding:utf-8 -*-
+
+import re
+
+def f_lower(s):
+    pattern_lower = re.compile(r"[a-z]")
+    if pattern_lower.match(s):
+        return True
+    return False    
+
+def f_upper(s):
+    pattern_upper = re.compile(r"[A-Z]")
+    if pattern_upper.match(s):
+        return True
+    return False    
+
+def f_string_lower(s):
+    pattern_lower = re.compile(r"\A[a-z]*\z")
+    if re.match(pattern_lower,s):
+        return True
+    return False
+    
+print f_lower("s")
+print f_lower("S")
+print f_upper("s")
+print f_upper("S")
+
+
+pattern_lower = re.compile(r"[a-z]")
+print re.findall(pattern_lower, "eeeeee")
+
+print "s".isupper()
+print "e".islower()
+print "E".islower()
+
+letters = "asdfssdEJKHIHIEHF"
+uppers = [l for l in letters if l.isupper()]
+print uppers
+print "".join(uppers)
+
+print f_string_lower(letters)
diff --git a/python_skills/040_string_upper_capitalize.py b/python_skills/040_string_upper_capitalize.py
new file mode 100644
index 0000000..3cf01a9
--- /dev/null
+++ b/python_skills/040_string_upper_capitalize.py
@@ -0,0 +1,17 @@
+#!/usr/bin/python
+#-*- coding: utf-8 -*- 
+
+string_1 = "abcdJGUYB"
+string_2 = "sdgIDJdf sdjg222jsd def"
+
+print string_1.upper()
+print string_1.lower()
+print string_1.swapcase()
+
+print string_2.title()
+print string_2.capitalize()
+def canonical_header_name(str):
+    return "-".join(map(lambda x:x.capitalize(),str.split("-")))
+
+string_3 = "wang-shu-guang"
+print canonical_header_name(string_3)
diff --git a/python_skills/041_partition_of_string.py b/python_skills/041_partition_of_string.py
new file mode 100644
index 0000000..cb28bde
--- /dev/null
+++ b/python_skills/041_partition_of_string.py
@@ -0,0 +1,19 @@
+#!/usr/bin/python
+#-*- coding:utf-8 -*-
+
+string_1 = "abcdefghijklmnopqrstuvwxyz"
+
+print string_1[1]
+print string_1[1:-1]
+print string_1[0:3]
+
+string_2 = u"中国人"
+print "use unicode"
+print string_2[0:2]
+
+string_3 = u" き ki, ひ hi, み mi, け ke, へ he, め me, こ ko, そ so, と to, の no, も mo, よ yo and ろ ro"
+print string_3[0:10]
+
+string_4 = "中国人"
+print string_4[0:3]
+print string_4[1:4]
diff --git a/python_skills/042_patrition_of_matched_regex.py b/python_skills/042_patrition_of_matched_regex.py
new file mode 100644
index 0000000..165e93b
--- /dev/null
+++ b/python_skills/042_patrition_of_matched_regex.py
@@ -0,0 +1,26 @@
+#!/usr/bin/python
+#-*- coding:utf-8 -*-
+
+import re
+
+pattern_1 = re.compile(r"ab(...)(.)(..)")
+pattern_2 = re.compile(r"kk")
+string_1 = u"abdjsjgjscskdjgiabfdksjgjcslkdjgioabcjaskdl;jtabc"
+print re.match(pattern_1, string_1).group(1)
+print re.search(pattern_1, string_1).group(1)
+print re.search(pattern_1, string_1).group()
+print "groupdict:"
+print re.match(pattern_1, string_1).groupdict()
+print "groups:"
+print re.search(pattern_1, string_1).groups()
+
+print re.findall(pattern_2,string_1)
+
+print (re.findall(pattern_1,string_1))[2]
+
+print re.match(pattern_2, string_1)
+
+
+print "How to get one part of the regex match?????"
+print "http://stackoverflow.com/questions/4666973/how-to-extract-a-substring-from-inside-a-string-in-python"
+
diff --git a/python_skills/043_pre_post_string_with_regex.py b/python_skills/043_pre_post_string_with_regex.py
new file mode 100644
index 0000000..a679e45
--- /dev/null
+++ b/python_skills/043_pre_post_string_with_regex.py
@@ -0,0 +1,18 @@
+#!/usr/bin/python
+#-*- coding:utf-8 -*-
+
+import re
+
+pattern_1 = re.compile(ur"(.*)论坛\|福彩(.*)")
+
+
+string_1 = u"彩吧论坛- 首页_彩票论坛|福彩论坛|体彩论坛|3D彩票论坛"
+
+
+print re.match(pattern_1, string_1).groups()
+print re.match(pattern_1, string_1).group(1)
+print re.match(pattern_1, string_1).group(2)
+
+print "There is no pre_match and post_match in python"
+
+
diff --git a/python_skills/044_regex_match_length.py b/python_skills/044_regex_match_length.py
new file mode 100644
index 0000000..44c84aa
--- /dev/null
+++ b/python_skills/044_regex_match_length.py
@@ -0,0 +1,16 @@
+#!/usr/bin/python
+#-*- coding:utf-8 -*-
+
+import re
+
+pattern_1 = re.compile(r'.ython')
+string_1 = 'i like python jython and dython (whatever that is)'
+
+iterator = re.finditer(pattern_1, string_1)
+match_tup = tuple(iterator)
+print match_tup[1].span()
+print match_tup[1].start()
+print match_tup[1].end()
+
+print match_tup[1].end() - match_tup[1].start() + 1
+print "use tuple contain the iterator"
diff --git a/python_skills/045_split_line_to_section.py b/python_skills/045_split_line_to_section.py
new file mode 100644
index 0000000..fbe35e8
--- /dev/null
+++ b/python_skills/045_split_line_to_section.py
@@ -0,0 +1,10 @@
+#!/usr/bin/python
+#-*- coding:utf-8 -*-
+import re
+string_1 = "I have\n a pen and\n a pencil!"
+string_2 = u"彩吧论坛- 首页_彩票论\n    \n坛|福彩论坛|体彩  \n  论坛|3D彩票论坛"
+
+
+
+lis2 = string_1.split("\n")
+print lis2
diff --git a/python_skills/046_split_string_into_line.py b/python_skills/046_split_string_into_line.py
new file mode 100644
index 0000000..1242475
--- /dev/null
+++ b/python_skills/046_split_string_into_line.py
@@ -0,0 +1,12 @@
+#!/usr/bin/python
+#-*- coding:utf-8 -*-
+
+string_1 = "a\nb\nc\nd\ne\n"
+print list(string_1)
+print string_1.splitlines()
+
+lines  = open('./019_literal.py').readlines()
+print lines
+clean_lines = [x.strip() for x in lines]
+print clean_lines
+
diff --git a/python_skills/047_split_string_into_word.py b/python_skills/047_split_string_into_word.py
new file mode 100644
index 0000000..efb6999
--- /dev/null
+++ b/python_skills/047_split_string_into_word.py
@@ -0,0 +1,9 @@
+#!/usr/bin/python
+#-*- coding:utf-8 -*-
+
+string_1 = "You can remove the empty element with The list comprehension(or just The regular for loop)"
+
+print string_1.split()
+print string_1.split('the')
+print string_1.split(r'The')
+
diff --git a/python_skills/048_regex_split_string.py b/python_skills/048_regex_split_string.py
new file mode 100644
index 0000000..ffa20ec
--- /dev/null
+++ b/python_skills/048_regex_split_string.py
@@ -0,0 +1,17 @@
+#!/usr/bin/python
+#-*- coding:utf-8 -*-
+
+import re
+
+string_2 = u"彩吧论坛- 首页_彩票论\n    \n坛|福彩论坛|体彩  \n  论坛|3D彩票论坛"
+
+print "use regex to split"
+pattern_1 = re.compile(r'\n[ \t\s\r]+\n')
+lis = pattern_1.split(string_2)
+for m in lis:
+    print "-------------hello--------------"
+    print m.encode('utf-8')
+
+
+l = re.compile(r'\n[ \t\s\r]+\n').split(string_2)
+print l
-- 
2.5.5

