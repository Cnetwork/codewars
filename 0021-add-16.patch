From 94b6cd9c6bb1281d299d769f568fc07eda6d08c3 Mon Sep 17 00:00:00 2001
From: cnetwork <shuguang.wang1990@gmail.com>
Date: Thu, 25 Aug 2016 22:19:32 +0800
Subject: [PATCH 21/25] add 16

---
 016_rsic_5k.rb           | 75 ------------------------------------------------
 ruby_wars/016_rsic_5k.rb | 75 ++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 75 insertions(+), 75 deletions(-)
 delete mode 100644 016_rsic_5k.rb
 create mode 100644 ruby_wars/016_rsic_5k.rb

diff --git a/016_rsic_5k.rb b/016_rsic_5k.rb
deleted file mode 100644
index 6cc0e04..0000000
--- a/016_rsic_5k.rb
+++ /dev/null
@@ -1,75 +0,0 @@
-def search_substr( fullText, searchText, allowOverlap = true)
-	if searchText == ''
-		0
-	else
-		fullText.scan(allowOverlap ? Regexp.new("(?=(#{searchText}))") : searchText).size
-	end
-end
-
-def search_substr(fullText, searchText, allowOverlap)
-	return 0 if searchText.empty?
-	count, offset = 0, 0
-	while idx = fullText.index(searchText, offset)
-		count += 1
-		offset = idx + (allowOverlap ? 1 : searchText.length)
-	end
-	count
-end
-
-
-def search_substr(fullText, searchText, allowOverlap = true)
-	searchText.empty? || fullText.empty? ? 0: fullText.scan(/#{searchText}#{'?' if allowOverlap}/).size
-end
-
-
-
-
-
-
-
-
-def search_substr(fullText,searchText, allowOverlap = true)
-  total = 0
-  if(!allowOverlap)
-  total =  fullText.scan(/#{searchText}/).size
-  else
-#  (0..fullText.length).inject(0) { |total, i|
-#    total +((fullText[i..-1]).index(/#{searchText}/).include(0))}
-  all = (0..fullText.length).map{|i|
-     (fullText[i..-1]).index(searchText)
-   }
-  total = all.count(0)
-  if((total == fullText.length + 1) && (searchText == ''))
-    total = 0
-  else
-    total
-  end
- end
-end
-p search_substr('aa_bb_cc_dd_bb_e', 'bb', true)
-p search_substr('aaabbbcccc', 'bbb') # should return 1
-p search_substr( 'aaa', 'aa' ) # should return 2
-p search_substr( 'aaa', '' ) # should return 0
-p search_substr( 'aaa', 'aa', false) # should return 1
-
-
-
-
-
-
-=begin
-class String
-  def all_subs substr, overlap = false
-    return scan(substr) unless overlap
-    (0...size).inject([]){ |r, i|
-      p self
-      r <<
-        ( substr.match(self[i..-1])[0]  rescue nil )
-    }.compact
-  end
-end
-
-
-p "aaaaaaaa".all_subs( /aaa/ )
-p "aaaabaaaa".all_subs( /aaa/, true )
-=end
\ No newline at end of file
diff --git a/ruby_wars/016_rsic_5k.rb b/ruby_wars/016_rsic_5k.rb
new file mode 100644
index 0000000..6cc0e04
--- /dev/null
+++ b/ruby_wars/016_rsic_5k.rb
@@ -0,0 +1,75 @@
+def search_substr( fullText, searchText, allowOverlap = true)
+	if searchText == ''
+		0
+	else
+		fullText.scan(allowOverlap ? Regexp.new("(?=(#{searchText}))") : searchText).size
+	end
+end
+
+def search_substr(fullText, searchText, allowOverlap)
+	return 0 if searchText.empty?
+	count, offset = 0, 0
+	while idx = fullText.index(searchText, offset)
+		count += 1
+		offset = idx + (allowOverlap ? 1 : searchText.length)
+	end
+	count
+end
+
+
+def search_substr(fullText, searchText, allowOverlap = true)
+	searchText.empty? || fullText.empty? ? 0: fullText.scan(/#{searchText}#{'?' if allowOverlap}/).size
+end
+
+
+
+
+
+
+
+
+def search_substr(fullText,searchText, allowOverlap = true)
+  total = 0
+  if(!allowOverlap)
+  total =  fullText.scan(/#{searchText}/).size
+  else
+#  (0..fullText.length).inject(0) { |total, i|
+#    total +((fullText[i..-1]).index(/#{searchText}/).include(0))}
+  all = (0..fullText.length).map{|i|
+     (fullText[i..-1]).index(searchText)
+   }
+  total = all.count(0)
+  if((total == fullText.length + 1) && (searchText == ''))
+    total = 0
+  else
+    total
+  end
+ end
+end
+p search_substr('aa_bb_cc_dd_bb_e', 'bb', true)
+p search_substr('aaabbbcccc', 'bbb') # should return 1
+p search_substr( 'aaa', 'aa' ) # should return 2
+p search_substr( 'aaa', '' ) # should return 0
+p search_substr( 'aaa', 'aa', false) # should return 1
+
+
+
+
+
+
+=begin
+class String
+  def all_subs substr, overlap = false
+    return scan(substr) unless overlap
+    (0...size).inject([]){ |r, i|
+      p self
+      r <<
+        ( substr.match(self[i..-1])[0]  rescue nil )
+    }.compact
+  end
+end
+
+
+p "aaaaaaaa".all_subs( /aaa/ )
+p "aaaabaaaa".all_subs( /aaa/, true )
+=end
\ No newline at end of file
-- 
2.5.5

